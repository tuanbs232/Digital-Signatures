package com.bkav.bkavsignature.test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import com.bkav.bkavsignature.cms.CMSSigner;
import com.bkav.bkavsignature.cms.CMSValidator;
import com.bkav.bkavsignature.utils.BkavSignaturesException;
import com.bkav.bkavsignature.utils.CryptoToken;
import com.bkav.bkavsignature.utils.CryptoTokenUtil;
import com.bkav.bkavsignature.utils.FileUtil;
import com.itextpdf.text.pdf.codec.Base64;

public class CMSSignerTestClass {
	public static void main(String[] args) {
		signTest();
	}

	public static void verifyTest() {
		// String inputPath =
		// "S:/WORK/2016/05-2016/Test_Files/Signeds/signed.p7b";

		// No content detached = false
		// String inputPath = "S:/WORK/2016/03-2016/Test
		// Files/signed_no_content.p7s";
		// --> Need data content to verify;
		// Using: CMSSignedData signedData = new CMSSignedData(signedContent,
		// signedData);

		// byte[] signedData = null;
		// try {
		// signedData = FileUtil.readBytesFromFile(inputPath);
		// } catch (IOException e1) {
		// e1.printStackTrace();
		// }

		String input = "";
		byte[] signedData = Base64.decode(input);
		// FileUtil.writeToFile(signedData,
		// "S:/WORK/2016/05-2016/Test_Files/Signeds/text_signed.p7s");

		if (signedData == null) {
			System.out.println("data null");
			return;
		}
		CMSValidator validator = new CMSValidator();
		System.out.println(validator.verify(signedData));
	}

	public static void signTest() {
		String data = "Data to test";
		final String TEST_KEYSTORE_PATH = "S:/WORK/2016/03-2016/PKCS12_TOKEN/BCSE_Client.p12";
		final String TEST_KEYSTORE_PASS = "12345678";

		byte[] dataToSign = data.getBytes();

		CMSSigner signer = new CMSSigner();
		try {
			FileInputStream inStream = new FileInputStream(
					new File(TEST_KEYSTORE_PATH));
			CryptoToken token = CryptoTokenUtil.initFromPkcs12(inStream,
					TEST_KEYSTORE_PASS);
			byte[] signedBytes = signer.sign(dataToSign, token, true);

			FileUtil.writeToFile(signedBytes,
					"S:/WORK/2016/05-2016/Test_files/Signeds/signed.p7b");
			System.out.println("Complete. Signed data store at: "
					+ "S:/WORK/2016/05-2016/Test_files/Signeds/signed.p7b");
		} catch (BkavSignaturesException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void signTestUsingPkcs11() {
		String configDir = "S:/WORK/2016/06-2016/E-Token/config.cfg";
		String pin = "12345678";
		String data = "Data to test";

		CryptoToken token = null;
		try {
			token = CryptoTokenUtil.initFromPkcs11(configDir, pin);
			if (token == null) {
				System.out.println("Token null");
				return;
			}

			byte[] dataToSign = data.getBytes();

			CMSSigner signer = new CMSSigner();
			byte[] signedBytes = signer.sign(dataToSign, token, true);

			FileUtil.writeToFile(signedBytes,
					"S:/WORK/2016/05-2016/Test_files/Signeds/signed.p7b");
			System.out.println("Complete. Signed data store at: "
					+ "S:/WORK/2016/05-2016/Test_files/Signeds/signed.p7b");
		} catch (BkavSignaturesException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
